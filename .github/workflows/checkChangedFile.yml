name: Review PR for parameter changes

on:
  pull_request_target:
    branches: [ main ]
    paths: "testfiles/armjson/main.json"

jobs:
  checkPr:
    runs-on: ubuntu-latest

    steps:
      - name: Variable check
        run: |
          echo ${{ github.event.pull_request.id }}
        
      - uses: actions/checkout@v2
        with:
          path: old
        
      - uses: actions/checkout@v2
        with:
          path: new
          ref: ${{ github.event.pull_request.head.sha }}    
      
      - name: Display new file
        run: cat new/testfiles/armjson/main.json
        
          
      - name: Display old file
        run: cat old/testfiles/armjson/main.json
          
      - name: Display old file
        env: 
          oldFilePath: 'old/testfiles/armjson/main.json'
          newFilePath : 'new/testfiles/armjson/main.json'
        shell: pwsh
        run: |
          write-output $Env:oldFilePath
          $arm1params = get-content $Env:oldFilePath | ConvertFrom-Json -AsHashtable | Select -expandProperty parameters
          $arm2params = get-content $Env:newFilePath | ConvertFrom-Json -AsHashtable | Select -expandProperty parameters

          $arm1paramList = @()
          $arm1params.keys | % {$arm1paramList += New-Object PSObject -Property ([Ordered]@{Parameter=$_; DefaultValue=$arm1params.Get_Item($_).defaultValue | ConvertTo-Json -Compress })}

          $arm2paramList = @()
          $arm2params.keys | % {$arm2paramList+= New-Object PSObject -Property ([Ordered]@{Parameter=$_; DefaultValue=$arm2params.Get_Item($_).defaultValue | ConvertTo-Json -Compress })}

          $comparison = Compare-Object $arm1paramList $arm2paramList -Property Name, DefaultValue -PassThru | select Parameter, DefaultValue, @{N='FileVersion';E={$_.SideIndicator.replace('<=','Old').replace('=>','New')}} | sort Parameter, @{e='FileVersion';desc=$true}

          [string]$html = $comparison | ConvertTo-Html -Fragment | Out-String
          "<h2>Detected parameter change</h2><p>Parameter changes need to be reviewed carefully</p>" + $html | Out-File "ghpr.html"

          if ($comparison.length -gt 0) {
              #$markdownTableHeader = '|{0}|' -f (($comparison[0].PSObject.Properties.Name -replace '(?<!\\)\|', '\|') -join '|') + '|{0}|' -f (($comparison[0].PSObject.Properties.Name -replace '.', '-') -join '|')
              #$markdownTableBody= $comparison | % {'|{0}|' -f (($_.PsObject.Properties.Value -replace '(?<!\\)\|', '\|') -join '|')}
              #[string]$markdown= $markdownTableHeader + $markdownTableBody
              #gh pr comment 3 -b $html

              #Why do markdown, when you can do HTML :D
              #GitHub uses a markdown rendering tool called Glamour. It copes with HTML pretty well, and pwsh loves html not markdown.
              gh pr review ${{ github.event.pull_request.id }} -c -F "ghpr.html"
              gh pr review ${{ github.event.pull_request.id }} -r -F "ghpr.html"
          }
          
