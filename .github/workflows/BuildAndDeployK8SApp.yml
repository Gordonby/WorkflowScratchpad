# This workflow demonstrates building a container image, pushing to an Azure Container Registry and deploying to Kubernetes
# It is split into separate jobs for readability but could be squashed into a single job if that best suits your scenario

# Status: Work In Progress

on:
  workflow_call:
    inputs:
      RG:
        required: true
        type: string
      AKSNAME:
        required: true
        type: string
      ACRNAME:
        required: true
        type: string
      APPNAME:
        required: true
        type: string
      NAMESPACE:
        default: "default"
        required: false
        type: string
      APPREPO:
        default: "https://github.com/Gordonby/azure-voting-app-redis.git"
        required: false
        type: string
      APPREPOREF:
        default: "gb-k8smanifests"
        required: false
        type: string
      APPREPOPATH:
        default: "./azure-vote"
        required: false
        type: string
        description: The directory in the repo containing the Dockerfile
    secrets:
      AZURE_CREDENTIALS:
        required: true

jobs:
  BuildPush:
    runs-on: ubuntu-latest
    env:
      APPNAME: "${{ inputs.APPNAME }}"
      ACRNAME: "${{ inputs.ACRNAME}}"
      RG: "${{ inputs.RG }}" 
      
    steps:
      - name: Get application code from repo
        uses: actions/checkout@v2
        with: 
          repository: ${{ inputs.APPREPO}}
          ref: ${{ inputs.APPREPOREF}}

      - name: Job parameter inspection
        run: |
          echo "RG is ${{ inputs.RG }}"
          echo "AKS name is ${{ inputs.AKSNAME }}"
          
      - name: Azure Login
        uses: Azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: false
          environment: azurecloud
          allow-no-subscriptions: false
      
      - name: Connect to Azure Container Registry (ACR)
        run:
          TOKEN=$(az acr login --name $ACRNAME --expose-token --output tsv --query accessToken)
          docker login $ACRNAME.azurecr.io --username $ACRNAME --password $TOKEN

      - name: Container build and push to a Azure Container Registry (ACR)
        env:
          APPREPOPATH: "${{ inputs.APPREPOPATH}}"
        run: |
          cd $APPREPOPATH
          docker build . -t ${{ inputs.ACRNAME }}.azurecr.io/${{ inputs.APP_NAME }}:${{ github.sha }}
          docker push ${{ inputs.ACRNAME }}.azurecr.io/${{ inputs.APP_NAME }}:${{ github.sha }}
          
  Deploy:
    runs-on: ubuntu-latest
    env:
      APPNAME: "${{ inputs.APPNAME }}"
      NAMESP: "${{ inputs.NAMESPACE }}"
      AKSNAME: "${{ inputs.AKSNAME}}"
      ACRNAME: "${{ inputs.ACRNAME}}"
      RG: "${{ inputs.RG }}"
      
    steps:
      - name: Get application k8s manifests from repo
        uses: actions/checkout@v2
        with: 
          repository: ${{ inputs.APPREPO}}
          ref: ${{ inputs.APPREPOREF}}
          
      - name: Azure Login
        uses: Azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: false
          environment: azurecloud
          allow-no-subscriptions: false
      
      - name: Set the target Azure Kubernetes Service (AKS) cluster.
        uses: azure/aks-set-context@v1
        with:
          creds: '${{ secrets.AZURE_CREDENTIALS }}'
          cluster-name: ${{ inputs.AKSNAME }}
          resource-group: ${{ inputs.RG }}

      - name: Deploy app to AKS
        uses: azure/k8s-deploy@v1
        env:
          ACRNAME: "${{ inputs.ACRNAME}}"
        with:
          manifests: |
            manifests/decomposed/back-deployment.yml
            manifests/decomposed/back-service.yml
            manifests/decomposed/front-deployment.yml
            manifests/decomposed/front-service.yml
          images: |
            ${{ env.ACRNAME }}.azurecr.io/azure-vote-front:${{ github.sha }}
          namespace: ${{ inputs.NAMESPACE }}
